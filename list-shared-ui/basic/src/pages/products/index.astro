---

import { getCollection } from 'astro:content';
import { Picture } from "astro:assets";

import FormattedDate from '../../components/FormattedDate.astro';
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/Container.astro';
import textProductsPage from '../../const/products/products.json'
import MarkdownText from '../../components/react-components/markdown-text';
import localeTextSite from "../../locale/locale_text_site.json";


const products = (await getCollection('products'))
  .filter(product => product.data.is_active)
  .sort((a, b) => a.data.serial_number - b.data.serial_number);
---

<Layout title="Услуги | Продукты" description="Список и краткое описание услуг/продуктов.">		
	<Container>  
		<div class="mt-10">
			<p class="text-4xl lg:text-5xl font-bold lg:tracking-tight">
			  {textProductsPage.title}
			</p>
			<p class="text-lg mt-4 ">
			 {textProductsPage.subtitle}
			</p>
		  </div>
		
		<main class="mt-16">
			
			<ul class="grid gap-16 max-w-4xl mx-auto">
			  {
				products?.map((product, index) => (
				  <li>
					<a href={`/products/${product?.slug}`}>
					
					  <div class="grid md:grid-cols-2 gap-5 md:gap-10 items-center">
						<Picture
						  src={product?.data?.image?.src}
						  alt={product?.data?.image?.alt}
						  sizes="(max-width: 800px) 100vw, 800px"
						  width={800}
						  height={600}
						  loading={index <= 2 ? "eager" : "lazy"}
						  decoding={index <= 2 ? "sync" : "async"}
						  class={`${textProductsPage.isBlackAndWhitePhoto ? 'object-cover filter grayscale rounded-lg' : 'rounded-lg'} w-full rounded-md object-cover object-center bg-white`}
						/>
						
						<div>
							<span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
								{localeTextSite.pages.products.moreDetail}
						  </span>
						  <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
							{product?.data?.category}
						  </span>
	  
						  <div class="text-3xl font-semibold leading-snug tracking-tight mt-1 ">
							
							<MarkdownText text={product?.data?.title} client:load /> 
						  </div>

						  {Number(product?.data?.discount) > 0 ? (
							<>
								<span class="line-through text-gray-500">{product?.data?.price?.toFixed(2)} {localeTextSite.pages.products.iconPrice}</span>
								<span class="ml-2 text-red-500 font-semibold">
									{(product?.data?.price - product?.data?.price * product?.data?.discount / 100)?.toFixed(2)} {localeTextSite.pages.products.iconPrice}</span>
							</>
							) : (
							<span class="text-gray-800 font-semibold">{product?.data?.price?.toFixed(2)} {localeTextSite.pages.products.iconPrice}</span>
							)}

	  
						  <div class="flex gap-2 mt-3">
							<span class="text-gray-400">
							  {product?.data?.author}
							</span>
							<span class="text-gray-400">• </span>
							<p class="date">
									<FormattedDate date={product?.data?.pubDate} />
							</p>
						  </div>
						</div>
					  </div>
					</a>
				  </li>
				))
			  }
			</ul>
		  </main>
		 
</Layout>
